{"version":3,"file":"static/js/474.e7ca38ad.chunk.js","mappings":"kNAmBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,EClCD,EAAuB,6BAAvB,EAA6D,+B,SC+C7D,EA3CuB,SAAC,GAAkB,IAAhBQ,EAAe,EAAfA,SACxB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAeA,OACE,kBAAML,SATY,SAAAM,GAClBA,EAAEC,iBACaP,EAAS,CAAEE,KAAAA,EAAME,OAAAA,MANhCD,EAAQ,IACRE,EAAU,IASX,EAG8BG,UAAWC,EAAxC,WACE,kBACEC,MAAOR,EACPS,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBT,EAAQS,EAAOF,MAA/B,EACVG,KAAK,OACLX,KAAK,OACLY,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,kBACEN,MAAON,EACPO,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBP,EAAUO,EAAOF,MAAjC,EACVG,KAAK,MACLX,KAAK,SACLY,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,mBAAQH,KAAK,SAASL,UAAWC,EAAjC,2BAKL,EC9CD,EAAuB,0BAAvB,EAAwD,0BAAxD,EAA2F,4BAA3F,EAAmI,+BCyBnI,EAvBoB,SAAC,GAA2C,IAAzCjB,EAAwC,EAAxCA,GAAIU,EAAoC,EAApCA,KAAME,EAA8B,EAA9BA,OAAQa,EAAsB,EAAtBA,gBACvC,OACE,gBAAIT,UAAWC,EAAf,WACE,eAAGD,UAAWC,EAAd,UAA4BP,EAA5B,QACA,cAAGM,UAAWC,EAAd,SAA8BL,KAC9B,mBACES,KAAK,SACLL,UAAWC,EACXS,QAAS,kBAAMD,EAAgBzB,EAAtB,EAHX,sBASL,EChBD,EAAuB,4BC+BvB,EA3BsB,SAAC,GAAmC,IAAjC2B,EAAgC,EAAhCA,SAAUF,EAAsB,EAAtBA,gBACjC,OACE,eAAIT,UAAWC,EAAf,SACGU,EAASC,KAAI,gBAAG5B,EAAH,EAAGA,GAAIU,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACZ,SAAC,EAAD,CAEEZ,GAAIA,EACJU,KAAMA,EACNE,OAAQA,EACRa,gBAAiBA,GAJZzB,EAFK,KAWnB,EClBD,EAA0B,kCAA1B,EAAoE,gCCYpE,EATyB,SAAC,GAAD,IAAGkB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACvB,iBAAKH,UAAWC,EAAhB,WACE,kBAAOD,UAAWC,EAAcY,QAAQ,SAAxC,oCAGA,kBAAOR,KAAK,OAAOX,KAAK,SAASQ,MAAOA,EAAOC,SAAUA,MALpC,EC6EzB,EA1EmB,WACjB,OAAgCV,EAAAA,EAAAA,WAAS,WACvC,IAAMqB,EAAqBC,KAAKC,MAAMC,aAAaC,QAAQ,gBAC3D,OAAyB,OAAlBJ,QAAkB,IAAlBA,GAAAA,EAAoBK,OAASL,EAAqB,EAC1D,IAHD,eAAOH,EAAP,KAAiBS,EAAjB,KAIA,GAA4B3B,EAAAA,EAAAA,UAAS,IAArC,eAAO4B,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACRN,aAAaO,QAAQ,cAAeT,KAAKU,UAAUd,GACpD,GAAE,CAACA,IAEJ,IA2CMe,EAXqB,WACzB,IAAKL,EACH,OAAOV,EAGT,IAAMgB,EAAmBN,EAAOO,cAChC,OAAOjB,EAASU,QAAO,SAAAQ,GAAO,OAC5BA,EAAQnC,KAAKkC,cAAcE,SAASH,EADR,GAG/B,CAEuBI,GAClBC,EAAaC,QAAQP,EAAgBP,QAE3C,OACE,4BACE,uCACA,SAAC,EAAD,CAAgB3B,SAjDE,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OACvBsC,EAAkBxC,EAAKkC,cAE7B,OACEjB,EAASwB,MAAK,SAAAN,GAAO,OAAIA,EAAQnC,KAAKkC,gBAAkBM,CAAnC,KAErBE,MAAM,GAAD,OAAI1C,EAAJ,6BACE,IAGT0B,GAAY,SAAAiB,GACV,IAAMR,EAAU,CACd7C,GAAIF,IACJY,KAAAA,EACAE,OAAAA,GAGF,MAAM,GAAN,eAAWyC,GAAX,CAAyBR,GAC1B,KACM,EACR,KA8BG,sCACA,SAAC,EAAD,CAAkB3B,MAAOmB,EAAQlB,SAvBhB,SAAAL,GACnBwB,EAAUxB,EAAEM,OAAOF,MACpB,IAsBI8B,IACC,SAAC,EAAD,CACErB,SAAUe,EACVjB,gBAjCc,SAAAzB,GACpBoC,GAAY,SAAAiB,GAAY,OACtBA,EAAahB,QAAO,SAAAQ,GAAO,OAAIA,EAAQ7C,KAAOA,CAAnB,GADL,GAGzB,KAgCKgD,IAAc,sDAGrB,ECrED,EARoB,WAClB,OACE,0BACE,SAAC,EAAD,KAGL,C","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/modules/MyContacts/MyContactsForm/myContactsForm.module.css?0c7a","modules/MyContacts/MyContactsForm/MyContactsForm.jsx","webpack://react-homework-template/./src/modules/MyContacts/MyContactList/ContactItem/contactItem.module.css?10c4","modules/MyContacts/MyContactList/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/modules/MyContacts/MyContactList/myContactList.module.css?4c03","modules/MyContacts/MyContactList/MyContactList.jsx","webpack://react-homework-template/./src/modules/MyContacts/MyContactsFilter/myContactsFilter.module.css?5116","modules/MyContacts/MyContactsFilter/MyContactsFilter.jsx","modules/MyContacts/MyContacts.jsx","pages/MyContactsPage/MyContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"myContactsForm_form__7K569\",\"button\":\"myContactsForm_button__CST9o\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './myContactsForm.module.css';\n\nconst MyContactsForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmt = e => {\n    e.preventDefault();\n    const result = onSubmit({ name, number });\n    if (result) {\n      reset();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmt} className={styles.form}>\n      <input\n        value={name}\n        onChange={({ target }) => setName(target.value)}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <input\n        value={number}\n        onChange={({ target }) => setNumber(target.value)}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\" className={styles.button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\nexport default MyContactsForm;\n\nMyContactsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"contactItem_item__VUf3q\",\"name\":\"contactItem_name__KstQc\",\"number\":\"contactItem_number__5f4gx\",\"deleteBtn\":\"contactItem_deleteBtn__JT2zm\"};","import PropTypes from 'prop-types';\nimport styles from './contactItem.module.css';\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <li className={styles.item}>\n      <p className={styles.name}>{name}:</p>\n      <p className={styles.number}>{number}</p>\n      <button\n        type=\"button\"\n        className={styles.deleteBtn}\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"myContactList_list__n9HoE\"};","import PropTypes from 'prop-types';\n\nimport ContactItem from './ContactItem/ContactItem';\nimport styles from './myContactList.module.css';\n\nconst MyContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          onDeleteContact={onDeleteContact}\n        />\n      ))}\n    </ul>\n  );\n};\n\nMyContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default MyContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"myContactsFilter_wrapper__ApCxS\",\"label\":\"myContactsFilter_label__IiMGa\"};","import PropTypes from 'prop-types';\n\nimport styles from './myContactsFilter.module.css';\n\nconst MyContactsFilter = ({ value, onChange }) => (\n  <div className={styles.wrapper}>\n    <label className={styles.label} htmlFor=\"filter\">\n      Find contacts by name\n    </label>\n    <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n  </div>\n);\n\nexport default MyContactsFilter;\n\nMyContactsFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport MyContactsForm from './MyContactsForm/MyContactsForm';\nimport MyContactList from './MyContactList/MyContactList';\nimport MyContactsFilter from './MyContactsFilter/MyContactsFilter';\n\nconst MyContacts = () => {\n  const [contacts, setContacts] = useState(() => {\n    const localSavedContacts = JSON.parse(localStorage.getItem('my-contacts'));\n    return localSavedContacts?.length ? localSavedContacts : [];\n  });\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('my-contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addNewContact = ({ name, number }) => {\n    const normalaizedName = name.toLowerCase();\n\n    if (\n      contacts.find(contact => contact.name.toLowerCase() === normalaizedName)\n    ) {\n      alert(`${name} is already in contacts`);\n      return false;\n    }\n\n    setContacts(prevContacts => {\n      const contact = {\n        id: nanoid(),\n        name,\n        number,\n      };\n\n      return [...prevContacts, contact];\n    });\n    return true;\n  };\n\n  const deleteContact = id => {\n    setContacts(prevContacts =>\n      prevContacts.filter(contact => contact.id !== id)\n    );\n  };\n\n  const changeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  const getVisibleContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const visibleContacts = getVisibleContacts();\n  const isContacts = Boolean(visibleContacts.length);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <MyContactsForm onSubmit={addNewContact} />\n      <h2>Contacts</h2>\n      <MyContactsFilter value={filter} onChange={changeFilter} />\n      {isContacts && (\n        <MyContactList\n          contacts={visibleContacts}\n          onDeleteContact={deleteContact}\n        />\n      )}\n      {!isContacts && <p>No contacts in list, yet</p>}\n    </div>\n  );\n};\n\nexport default MyContacts;\n","import MyContacts from 'modules/MyContacts/MyContacts';\n\nconst MyBooksPage = () => {\n  return (\n    <div>\n      <MyContacts />\n    </div>\n  );\n};\n\nexport default MyBooksPage;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","onSubmit","useState","name","setName","number","setNumber","e","preventDefault","className","styles","value","onChange","target","type","pattern","title","required","onDeleteContact","onClick","contacts","map","htmlFor","localSavedContacts","JSON","parse","localStorage","getItem","length","setContacts","filter","setFilter","useEffect","setItem","stringify","visibleContacts","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","isContacts","Boolean","normalaizedName","find","alert","prevContacts"],"sourceRoot":""}